// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class WorkspaceSafe extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("workspace", Value.fromString(""));
    this.set("address", Value.fromString(""));
    this.set("chainId", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WorkspaceSafe entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WorkspaceSafe entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WorkspaceSafe", id.toString(), this);
    }
  }

  static load(id: string): WorkspaceSafe | null {
    return changetype<WorkspaceSafe | null>(store.get("WorkspaceSafe", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get workspace(): string {
    let value = this.get("workspace");
    return value!.toString();
  }

  set workspace(value: string) {
    this.set("workspace", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get chainId(): BigInt {
    let value = this.get("chainId");
    return value!.toBigInt();
  }

  set chainId(value: BigInt) {
    this.set("chainId", Value.fromBigInt(value));
  }
}

export class Social extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("value", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Social entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Social entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Social", id.toString(), this);
    }
  }

  static load(id: string): Social | null {
    return changetype<Social | null>(store.get("Social", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value!.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }
}

export class Section extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("grants", Value.fromStringArray(new Array(0)));
    this.set("sectionName", Value.fromString(""));
    this.set("sectionLogoIpfsHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Section entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Section entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Section", id.toString(), this);
    }
  }

  static load(id: string): Section | null {
    return changetype<Section | null>(store.get("Section", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grants(): Array<string> {
    let value = this.get("grants");
    return value!.toStringArray();
  }

  set grants(value: Array<string>) {
    this.set("grants", Value.fromStringArray(value));
  }

  get sectionName(): string {
    let value = this.get("sectionName");
    return value!.toString();
  }

  set sectionName(value: string) {
    this.set("sectionName", Value.fromString(value));
  }

  get sectionLogoIpfsHash(): string {
    let value = this.get("sectionLogoIpfsHash");
    return value!.toString();
  }

  set sectionLogoIpfsHash(value: string) {
    this.set("sectionLogoIpfsHash", Value.fromString(value));
  }
}

export class Comment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("workspace", Value.fromString(""));
    this.set("grant", Value.fromString(""));
    this.set("application", Value.fromString(""));
    this.set("createdBy", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Comment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Comment entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Comment", id.toString(), this);
    }
  }

  static load(id: string): Comment | null {
    return changetype<Comment | null>(store.get("Comment", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get commentsPublicHash(): string | null {
    let value = this.get("commentsPublicHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set commentsPublicHash(value: string | null) {
    if (!value) {
      this.unset("commentsPublicHash");
    } else {
      this.set("commentsPublicHash", Value.fromString(<string>value));
    }
  }

  get commentsEncryptedData(): Array<string> | null {
    let value = this.get("commentsEncryptedData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set commentsEncryptedData(value: Array<string> | null) {
    if (!value) {
      this.unset("commentsEncryptedData");
    } else {
      this.set(
        "commentsEncryptedData",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get workspace(): string {
    let value = this.get("workspace");
    return value!.toString();
  }

  set workspace(value: string) {
    this.set("workspace", Value.fromString(value));
  }

  get grant(): string {
    let value = this.get("grant");
    return value!.toString();
  }

  set grant(value: string) {
    this.set("grant", Value.fromString(value));
  }

  get application(): string {
    let value = this.get("application");
    return value!.toString();
  }

  set application(value: string) {
    this.set("application", Value.fromString(value));
  }

  get isPrivate(): boolean {
    let value = this.get("isPrivate");
    return value!.toBoolean();
  }

  set isPrivate(value: boolean) {
    this.set("isPrivate", Value.fromBoolean(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get createdBy(): Bytes {
    let value = this.get("createdBy");
    return value!.toBytes();
  }

  set createdBy(value: Bytes) {
    this.set("createdBy", Value.fromBytes(value));
  }
}

export class Partner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("industry", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Partner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Partner entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Partner", id.toString(), this);
    }
  }

  static load(id: string): Partner | null {
    return changetype<Partner | null>(store.get("Partner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get industry(): string {
    let value = this.get("industry");
    return value!.toString();
  }

  set industry(value: string) {
    this.set("industry", Value.fromString(value));
  }

  get website(): string | null {
    let value = this.get("website");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set website(value: string | null) {
    if (!value) {
      this.unset("website");
    } else {
      this.set("website", Value.fromString(<string>value));
    }
  }

  get partnerImageHash(): string | null {
    let value = this.get("partnerImageHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set partnerImageHash(value: string | null) {
    if (!value) {
      this.unset("partnerImageHash");
    } else {
      this.set("partnerImageHash", Value.fromString(<string>value));
    }
  }
}

export class GrantField extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("title", Value.fromString(""));
    this.set("inputType", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantField entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GrantField entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GrantField", id.toString(), this);
    }
  }

  static load(id: string): GrantField | null {
    return changetype<GrantField | null>(store.get("GrantField", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get inputType(): string {
    let value = this.get("inputType");
    return value!.toString();
  }

  set inputType(value: string) {
    this.set("inputType", Value.fromString(value));
  }

  get possibleValues(): Array<string> | null {
    let value = this.get("possibleValues");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set possibleValues(value: Array<string> | null) {
    if (!value) {
      this.unset("possibleValues");
    } else {
      this.set("possibleValues", Value.fromStringArray(<Array<string>>value));
    }
  }

  get isPii(): boolean {
    let value = this.get("isPii");
    return value!.toBoolean();
  }

  set isPii(value: boolean) {
    this.set("isPii", Value.fromBoolean(value));
  }
}

export class GrantFieldAnswerItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("answer", Value.fromString(""));
    this.set("value", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantFieldAnswerItem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GrantFieldAnswerItem entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GrantFieldAnswerItem", id.toString(), this);
    }
  }

  static load(id: string): GrantFieldAnswerItem | null {
    return changetype<GrantFieldAnswerItem | null>(
      store.get("GrantFieldAnswerItem", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get answer(): string {
    let value = this.get("answer");
    return value!.toString();
  }

  set answer(value: string) {
    this.set("answer", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value!.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }

  get walletId(): Bytes | null {
    let value = this.get("walletId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set walletId(value: Bytes | null) {
    if (!value) {
      this.unset("walletId");
    } else {
      this.set("walletId", Value.fromBytes(<Bytes>value));
    }
  }
}

export class GrantFieldAnswer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("field", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantFieldAnswer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GrantFieldAnswer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GrantFieldAnswer", id.toString(), this);
    }
  }

  static load(id: string): GrantFieldAnswer | null {
    return changetype<GrantFieldAnswer | null>(
      store.get("GrantFieldAnswer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get field(): string {
    let value = this.get("field");
    return value!.toString();
  }

  set field(value: string) {
    this.set("field", Value.fromString(value));
  }

  get values(): Array<string> {
    let value = this.get("values");
    return value!.toStringArray();
  }

  set values(value: Array<string>) {
    this.set("values", Value.fromStringArray(value));
  }
}

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("asset", Value.fromBytes(Bytes.empty()));
    this.set("committed", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Reward entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Reward", id.toString(), this);
    }
  }

  static load(id: string): Reward | null {
    return changetype<Reward | null>(store.get("Reward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value!.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get committed(): BigInt {
    let value = this.get("committed");
    return value!.toBigInt();
  }

  set committed(value: BigInt) {
    this.set("committed", Value.fromBigInt(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("label", Value.fromString(""));
    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("iconHash", Value.fromString(""));
    this.set("workspace", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get label(): string {
    let value = this.get("label");
    return value!.toString();
  }

  set label(value: string) {
    this.set("label", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get decimal(): i32 {
    let value = this.get("decimal");
    return value!.toI32();
  }

  set decimal(value: i32) {
    this.set("decimal", Value.fromI32(value));
  }

  get iconHash(): string {
    let value = this.get("iconHash");
    return value!.toString();
  }

  set iconHash(value: string) {
    this.set("iconHash", Value.fromString(value));
  }

  get workspace(): string {
    let value = this.get("workspace");
    return value!.toString();
  }

  set workspace(value: string) {
    this.set("workspace", Value.fromString(value));
  }

  get chainId(): BigInt | null {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chainId(value: BigInt | null) {
    if (!value) {
      this.unset("chainId");
    } else {
      this.set("chainId", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class RubricItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("title", Value.fromString(""));
    this.set("details", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RubricItem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RubricItem entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RubricItem", id.toString(), this);
    }
  }

  static load(id: string): RubricItem | null {
    return changetype<RubricItem | null>(store.get("RubricItem", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get details(): string {
    let value = this.get("details");
    return value!.toString();
  }

  set details(value: string) {
    this.set("details", Value.fromString(value));
  }

  get maximumPoints(): i32 {
    let value = this.get("maximumPoints");
    return value!.toI32();
  }

  set maximumPoints(value: i32) {
    this.set("maximumPoints", Value.fromI32(value));
  }
}

export class Rubric extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("items", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Rubric entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Rubric entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Rubric", id.toString(), this);
    }
  }

  static load(id: string): Rubric | null {
    return changetype<Rubric | null>(store.get("Rubric", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get items(): Array<string> {
    let value = this.get("items");
    return value!.toStringArray();
  }

  set items(value: Array<string>) {
    this.set("items", Value.fromStringArray(value));
  }

  get isPrivate(): boolean {
    let value = this.get("isPrivate");
    return value!.toBoolean();
  }

  set isPrivate(value: boolean) {
    this.set("isPrivate", Value.fromBoolean(value));
  }

  get createdAtS(): i32 {
    let value = this.get("createdAtS");
    return value!.toI32();
  }

  set createdAtS(value: i32) {
    this.set("createdAtS", Value.fromI32(value));
  }

  get updatedAtS(): i32 {
    let value = this.get("updatedAtS");
    return value!.toI32();
  }

  set updatedAtS(value: i32) {
    this.set("updatedAtS", Value.fromI32(value));
  }

  get addedBy(): string | null {
    let value = this.get("addedBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set addedBy(value: string | null) {
    if (!value) {
      this.unset("addedBy");
    } else {
      this.set("addedBy", Value.fromString(<string>value));
    }
  }
}

export class Review extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("application", Value.fromString(""));
    this.set("reviewer", Value.fromString(""));
    this.set("data", Value.fromStringArray(new Array(0)));
    this.set("profile", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Review entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Review entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Review", id.toString(), this);
    }
  }

  static load(id: string): Review | null {
    return changetype<Review | null>(store.get("Review", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get application(): string {
    let value = this.get("application");
    return value!.toString();
  }

  set application(value: string) {
    this.set("application", Value.fromString(value));
  }

  get reviewer(): string {
    let value = this.get("reviewer");
    return value!.toString();
  }

  set reviewer(value: string) {
    this.set("reviewer", Value.fromString(value));
  }

  get createdAtS(): i32 {
    let value = this.get("createdAtS");
    return value!.toI32();
  }

  set createdAtS(value: i32) {
    this.set("createdAtS", Value.fromI32(value));
  }

  get publicReviewDataHash(): string | null {
    let value = this.get("publicReviewDataHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set publicReviewDataHash(value: string | null) {
    if (!value) {
      this.unset("publicReviewDataHash");
    } else {
      this.set("publicReviewDataHash", Value.fromString(<string>value));
    }
  }

  get data(): Array<string> {
    let value = this.get("data");
    return value!.toStringArray();
  }

  set data(value: Array<string>) {
    this.set("data", Value.fromStringArray(value));
  }

  get profile(): string {
    let value = this.get("profile");
    return value!.toString();
  }

  set profile(value: string) {
    this.set("profile", Value.fromString(value));
  }
}

export class Grant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("creatorId", Value.fromBytes(Bytes.empty()));
    this.set("title", Value.fromString(""));
    this.set("summary", Value.fromString(""));
    this.set("details", Value.fromString(""));
    this.set("reward", Value.fromString(""));
    this.set("totalGrantFundingCommittedUSD", Value.fromBigInt(BigInt.zero()));
    this.set("totalGrantFundingDisbursedUSD", Value.fromBigInt(BigInt.zero()));
    this.set("workspace", Value.fromString(""));
    this.set("fields", Value.fromStringArray(new Array(0)));
    this.set("metadataHash", Value.fromString(""));
    this.set("funding", Value.fromBigInt(BigInt.zero()));
    this.set("managers", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Grant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Grant entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Grant", id.toString(), this);
    }
  }

  static load(id: string): Grant | null {
    return changetype<Grant | null>(store.get("Grant", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creatorId(): Bytes {
    let value = this.get("creatorId");
    return value!.toBytes();
  }

  set creatorId(value: Bytes) {
    this.set("creatorId", Value.fromBytes(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get summary(): string {
    let value = this.get("summary");
    return value!.toString();
  }

  set summary(value: string) {
    this.set("summary", Value.fromString(value));
  }

  get details(): string {
    let value = this.get("details");
    return value!.toString();
  }

  set details(value: string) {
    this.set("details", Value.fromString(value));
  }

  get reward(): string {
    let value = this.get("reward");
    return value!.toString();
  }

  set reward(value: string) {
    this.set("reward", Value.fromString(value));
  }

  get totalGrantFundingCommittedUSD(): BigInt {
    let value = this.get("totalGrantFundingCommittedUSD");
    return value!.toBigInt();
  }

  set totalGrantFundingCommittedUSD(value: BigInt) {
    this.set("totalGrantFundingCommittedUSD", Value.fromBigInt(value));
  }

  get totalGrantFundingDisbursedUSD(): BigInt {
    let value = this.get("totalGrantFundingDisbursedUSD");
    return value!.toBigInt();
  }

  set totalGrantFundingDisbursedUSD(value: BigInt) {
    this.set("totalGrantFundingDisbursedUSD", Value.fromBigInt(value));
  }

  get workspace(): string {
    let value = this.get("workspace");
    return value!.toString();
  }

  set workspace(value: string) {
    this.set("workspace", Value.fromString(value));
  }

  get startDate(): string | null {
    let value = this.get("startDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set startDate(value: string | null) {
    if (!value) {
      this.unset("startDate");
    } else {
      this.set("startDate", Value.fromString(<string>value));
    }
  }

  get deadline(): string | null {
    let value = this.get("deadline");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deadline(value: string | null) {
    if (!value) {
      this.unset("deadline");
    } else {
      this.set("deadline", Value.fromString(<string>value));
    }
  }

  get startDateS(): i32 {
    let value = this.get("startDateS");
    return value!.toI32();
  }

  set startDateS(value: i32) {
    this.set("startDateS", Value.fromI32(value));
  }

  get deadlineS(): i32 {
    let value = this.get("deadlineS");
    return value!.toI32();
  }

  set deadlineS(value: i32) {
    this.set("deadlineS", Value.fromI32(value));
  }

  get payoutType(): string | null {
    let value = this.get("payoutType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set payoutType(value: string | null) {
    if (!value) {
      this.unset("payoutType");
    } else {
      this.set("payoutType", Value.fromString(<string>value));
    }
  }

  get reviewType(): string | null {
    let value = this.get("reviewType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reviewType(value: string | null) {
    if (!value) {
      this.unset("reviewType");
    } else {
      this.set("reviewType", Value.fromString(<string>value));
    }
  }

  get link(): string | null {
    let value = this.get("link");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set link(value: string | null) {
    if (!value) {
      this.unset("link");
    } else {
      this.set("link", Value.fromString(<string>value));
    }
  }

  get docIpfsHash(): string | null {
    let value = this.get("docIpfsHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set docIpfsHash(value: string | null) {
    if (!value) {
      this.unset("docIpfsHash");
    } else {
      this.set("docIpfsHash", Value.fromString(<string>value));
    }
  }

  get milestones(): Array<string> | null {
    let value = this.get("milestones");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set milestones(value: Array<string> | null) {
    if (!value) {
      this.unset("milestones");
    } else {
      this.set("milestones", Value.fromStringArray(<Array<string>>value));
    }
  }

  get fields(): Array<string> {
    let value = this.get("fields");
    return value!.toStringArray();
  }

  set fields(value: Array<string>) {
    this.set("fields", Value.fromStringArray(value));
  }

  get acceptingApplications(): boolean {
    let value = this.get("acceptingApplications");
    return value!.toBoolean();
  }

  set acceptingApplications(value: boolean) {
    this.set("acceptingApplications", Value.fromBoolean(value));
  }

  get numberOfApplicationsSelected(): i32 {
    let value = this.get("numberOfApplicationsSelected");
    return value!.toI32();
  }

  set numberOfApplicationsSelected(value: i32) {
    this.set("numberOfApplicationsSelected", Value.fromI32(value));
  }

  get numberOfApplicationsRejected(): i32 {
    let value = this.get("numberOfApplicationsRejected");
    return value!.toI32();
  }

  set numberOfApplicationsRejected(value: i32) {
    this.set("numberOfApplicationsRejected", Value.fromI32(value));
  }

  get numberOfApplicationsAwaitingResubmission(): i32 {
    let value = this.get("numberOfApplicationsAwaitingResubmission");
    return value!.toI32();
  }

  set numberOfApplicationsAwaitingResubmission(value: i32) {
    this.set("numberOfApplicationsAwaitingResubmission", Value.fromI32(value));
  }

  get numberOfApplicationsPending(): i32 {
    let value = this.get("numberOfApplicationsPending");
    return value!.toI32();
  }

  set numberOfApplicationsPending(value: i32) {
    this.set("numberOfApplicationsPending", Value.fromI32(value));
  }

  get metadataHash(): string {
    let value = this.get("metadataHash");
    return value!.toString();
  }

  set metadataHash(value: string) {
    this.set("metadataHash", Value.fromString(value));
  }

  get createdAtS(): i32 {
    let value = this.get("createdAtS");
    return value!.toI32();
  }

  set createdAtS(value: i32) {
    this.set("createdAtS", Value.fromI32(value));
  }

  get updatedAtS(): i32 {
    let value = this.get("updatedAtS");
    return value!.toI32();
  }

  set updatedAtS(value: i32) {
    this.set("updatedAtS", Value.fromI32(value));
  }

  get funding(): BigInt {
    let value = this.get("funding");
    return value!.toBigInt();
  }

  set funding(value: BigInt) {
    this.set("funding", Value.fromBigInt(value));
  }

  get numberOfApplications(): i32 {
    let value = this.get("numberOfApplications");
    return value!.toI32();
  }

  set numberOfApplications(value: i32) {
    this.set("numberOfApplications", Value.fromI32(value));
  }

  get applications(): Array<string> {
    let value = this.get("applications");
    return value!.toStringArray();
  }

  set applications(value: Array<string>) {
    this.set("applications", Value.fromStringArray(value));
  }

  get managers(): Array<string> {
    let value = this.get("managers");
    return value!.toStringArray();
  }

  set managers(value: Array<string>) {
    this.set("managers", Value.fromStringArray(value));
  }

  get fundTransfers(): Array<string> {
    let value = this.get("fundTransfers");
    return value!.toStringArray();
  }

  set fundTransfers(value: Array<string>) {
    this.set("fundTransfers", Value.fromStringArray(value));
  }

  get rubric(): string | null {
    let value = this.get("rubric");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rubric(value: string | null) {
    if (!value) {
      this.unset("rubric");
    } else {
      this.set("rubric", Value.fromString(<string>value));
    }
  }
}

export class GrantReviewerCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("grant", Value.fromString(""));
    this.set("reviewerAddress", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantReviewerCounter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GrantReviewerCounter entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GrantReviewerCounter", id.toString(), this);
    }
  }

  static load(id: string): GrantReviewerCounter | null {
    return changetype<GrantReviewerCounter | null>(
      store.get("GrantReviewerCounter", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grant(): string {
    let value = this.get("grant");
    return value!.toString();
  }

  set grant(value: string) {
    this.set("grant", Value.fromString(value));
  }

  get reviewerAddress(): Bytes {
    let value = this.get("reviewerAddress");
    return value!.toBytes();
  }

  set reviewerAddress(value: Bytes) {
    this.set("reviewerAddress", Value.fromBytes(value));
  }

  get counter(): i32 {
    let value = this.get("counter");
    return value!.toI32();
  }

  set counter(value: i32) {
    this.set("counter", Value.fromI32(value));
  }

  get pendingCounter(): i32 {
    let value = this.get("pendingCounter");
    return value!.toI32();
  }

  set pendingCounter(value: i32) {
    this.set("pendingCounter", Value.fromI32(value));
  }

  get doneCounter(): i32 {
    let value = this.get("doneCounter");
    return value!.toI32();
  }

  set doneCounter(value: i32) {
    this.set("doneCounter", Value.fromI32(value));
  }
}

export class GrantManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("grant", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantManager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GrantManager entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GrantManager", id.toString(), this);
    }
  }

  static load(id: string): GrantManager | null {
    return changetype<GrantManager | null>(store.get("GrantManager", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grant(): string {
    let value = this.get("grant");
    return value!.toString();
  }

  set grant(value: string) {
    this.set("grant", Value.fromString(value));
  }

  get member(): string | null {
    let value = this.get("member");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set member(value: string | null) {
    if (!value) {
      this.unset("member");
    } else {
      this.set("member", Value.fromString(<string>value));
    }
  }
}

export class PIIData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("data", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PIIData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PIIData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PIIData", id.toString(), this);
    }
  }

  static load(id: string): PIIData | null {
    return changetype<PIIData | null>(store.get("PIIData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get data(): string {
    let value = this.get("data");
    return value!.toString();
  }

  set data(value: string) {
    this.set("data", Value.fromString(value));
  }
}

export class Profile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("actorId", Value.fromBytes(Bytes.empty()));
    this.set("applications", Value.fromStringArray(new Array(0)));
    this.set("reviews", Value.fromStringArray(new Array(0)));
    this.set("workspaceMembers", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Profile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Profile entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Profile", id.toString(), this);
    }
  }

  static load(id: string): Profile | null {
    return changetype<Profile | null>(store.get("Profile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get actorId(): Bytes {
    let value = this.get("actorId");
    return value!.toBytes();
  }

  set actorId(value: Bytes) {
    this.set("actorId", Value.fromBytes(value));
  }

  get fullName(): string | null {
    let value = this.get("fullName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fullName(value: string | null) {
    if (!value) {
      this.unset("fullName");
    } else {
      this.set("fullName", Value.fromString(<string>value));
    }
  }

  get profilePictureIpfsHash(): string | null {
    let value = this.get("profilePictureIpfsHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set profilePictureIpfsHash(value: string | null) {
    if (!value) {
      this.unset("profilePictureIpfsHash");
    } else {
      this.set("profilePictureIpfsHash", Value.fromString(<string>value));
    }
  }

  get publicKey(): string | null {
    let value = this.get("publicKey");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set publicKey(value: string | null) {
    if (!value) {
      this.unset("publicKey");
    } else {
      this.set("publicKey", Value.fromString(<string>value));
    }
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value!.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }

  get applications(): Array<string> {
    let value = this.get("applications");
    return value!.toStringArray();
  }

  set applications(value: Array<string>) {
    this.set("applications", Value.fromStringArray(value));
  }

  get reviews(): Array<string> {
    let value = this.get("reviews");
    return value!.toStringArray();
  }

  set reviews(value: Array<string>) {
    this.set("reviews", Value.fromStringArray(value));
  }

  get workspaceMembers(): Array<string> {
    let value = this.get("workspaceMembers");
    return value!.toStringArray();
  }

  set workspaceMembers(value: Array<string>) {
    this.set("workspaceMembers", Value.fromStringArray(value));
  }
}

export class WorkspaceMember extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("accessLevel", Value.fromString(""));
    this.set("pii", Value.fromStringArray(new Array(0)));
    this.set("workspace", Value.fromString(""));
    this.set("addedBy", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WorkspaceMember entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WorkspaceMember entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WorkspaceMember", id.toString(), this);
    }
  }

  static load(id: string): WorkspaceMember | null {
    return changetype<WorkspaceMember | null>(store.get("WorkspaceMember", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get enabled(): boolean {
    let value = this.get("enabled");
    return value!.toBoolean();
  }

  set enabled(value: boolean) {
    this.set("enabled", Value.fromBoolean(value));
  }

  get accessLevel(): string {
    let value = this.get("accessLevel");
    return value!.toString();
  }

  set accessLevel(value: string) {
    this.set("accessLevel", Value.fromString(value));
  }

  get pii(): Array<string> {
    let value = this.get("pii");
    return value!.toStringArray();
  }

  set pii(value: Array<string>) {
    this.set("pii", Value.fromStringArray(value));
  }

  get workspace(): string {
    let value = this.get("workspace");
    return value!.toString();
  }

  set workspace(value: string) {
    this.set("workspace", Value.fromString(value));
  }

  get addedBy(): string {
    let value = this.get("addedBy");
    return value!.toString();
  }

  set addedBy(value: string) {
    this.set("addedBy", Value.fromString(value));
  }

  get addedAt(): i32 {
    let value = this.get("addedAt");
    return value!.toI32();
  }

  set addedAt(value: i32) {
    this.set("addedAt", Value.fromI32(value));
  }

  get removedAt(): i32 {
    let value = this.get("removedAt");
    return value!.toI32();
  }

  set removedAt(value: i32) {
    this.set("removedAt", Value.fromI32(value));
  }
}

export class Workspace extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ownerId", Value.fromBytes(Bytes.empty()));
    this.set("title", Value.fromString(""));
    this.set("bio", Value.fromString(""));
    this.set("about", Value.fromString(""));
    this.set("logoIpfsHash", Value.fromString(""));
    this.set("partners", Value.fromStringArray(new Array(0)));
    this.set("supportedNetworks", Value.fromStringArray(new Array(0)));
    this.set("members", Value.fromStringArray(new Array(0)));
    this.set("socials", Value.fromStringArray(new Array(0)));
    this.set("metadataHash", Value.fromString(""));
    this.set("grants", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Workspace entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Workspace entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Workspace", id.toString(), this);
    }
  }

  static load(id: string): Workspace | null {
    return changetype<Workspace | null>(store.get("Workspace", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ownerId(): Bytes {
    let value = this.get("ownerId");
    return value!.toBytes();
  }

  set ownerId(value: Bytes) {
    this.set("ownerId", Value.fromBytes(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get bio(): string {
    let value = this.get("bio");
    return value!.toString();
  }

  set bio(value: string) {
    this.set("bio", Value.fromString(value));
  }

  get about(): string {
    let value = this.get("about");
    return value!.toString();
  }

  set about(value: string) {
    this.set("about", Value.fromString(value));
  }

  get isVisible(): boolean {
    let value = this.get("isVisible");
    return value!.toBoolean();
  }

  set isVisible(value: boolean) {
    this.set("isVisible", Value.fromBoolean(value));
  }

  get logoIpfsHash(): string {
    let value = this.get("logoIpfsHash");
    return value!.toString();
  }

  set logoIpfsHash(value: string) {
    this.set("logoIpfsHash", Value.fromString(value));
  }

  get coverImageIpfsHash(): string | null {
    let value = this.get("coverImageIpfsHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set coverImageIpfsHash(value: string | null) {
    if (!value) {
      this.unset("coverImageIpfsHash");
    } else {
      this.set("coverImageIpfsHash", Value.fromString(<string>value));
    }
  }

  get partners(): Array<string> {
    let value = this.get("partners");
    return value!.toStringArray();
  }

  set partners(value: Array<string>) {
    this.set("partners", Value.fromStringArray(value));
  }

  get supportedNetworks(): Array<string> {
    let value = this.get("supportedNetworks");
    return value!.toStringArray();
  }

  set supportedNetworks(value: Array<string>) {
    this.set("supportedNetworks", Value.fromStringArray(value));
  }

  get createdAtS(): i32 {
    let value = this.get("createdAtS");
    return value!.toI32();
  }

  set createdAtS(value: i32) {
    this.set("createdAtS", Value.fromI32(value));
  }

  get updatedAtS(): i32 {
    let value = this.get("updatedAtS");
    return value!.toI32();
  }

  set updatedAtS(value: i32) {
    this.set("updatedAtS", Value.fromI32(value));
  }

  get mostRecentGrantPostedAtS(): i32 {
    let value = this.get("mostRecentGrantPostedAtS");
    return value!.toI32();
  }

  set mostRecentGrantPostedAtS(value: i32) {
    this.set("mostRecentGrantPostedAtS", Value.fromI32(value));
  }

  get members(): Array<string> {
    let value = this.get("members");
    return value!.toStringArray();
  }

  set members(value: Array<string>) {
    this.set("members", Value.fromStringArray(value));
  }

  get socials(): Array<string> {
    let value = this.get("socials");
    return value!.toStringArray();
  }

  set socials(value: Array<string>) {
    this.set("socials", Value.fromStringArray(value));
  }

  get metadataHash(): string {
    let value = this.get("metadataHash");
    return value!.toString();
  }

  set metadataHash(value: string) {
    this.set("metadataHash", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get safe(): string | null {
    let value = this.get("safe");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set safe(value: string | null) {
    if (!value) {
      this.unset("safe");
    } else {
      this.set("safe", Value.fromString(<string>value));
    }
  }

  get grants(): Array<string> {
    let value = this.get("grants");
    return value!.toStringArray();
  }

  set grants(value: Array<string>) {
    this.set("grants", Value.fromStringArray(value));
  }
}

export class ApplicationMilestone extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("application", Value.fromString(""));
    this.set("state", Value.fromString(""));
    this.set("title", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("amountPaid", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ApplicationMilestone entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ApplicationMilestone entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ApplicationMilestone", id.toString(), this);
    }
  }

  static load(id: string): ApplicationMilestone | null {
    return changetype<ApplicationMilestone | null>(
      store.get("ApplicationMilestone", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get application(): string {
    let value = this.get("application");
    return value!.toString();
  }

  set application(value: string) {
    this.set("application", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value!.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get amountPaid(): BigInt {
    let value = this.get("amountPaid");
    return value!.toBigInt();
  }

  set amountPaid(value: BigInt) {
    this.set("amountPaid", Value.fromBigInt(value));
  }

  get updatedAtS(): i32 {
    let value = this.get("updatedAtS");
    return value!.toI32();
  }

  set updatedAtS(value: i32) {
    this.set("updatedAtS", Value.fromI32(value));
  }

  get feedbackDao(): string | null {
    let value = this.get("feedbackDao");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set feedbackDao(value: string | null) {
    if (!value) {
      this.unset("feedbackDao");
    } else {
      this.set("feedbackDao", Value.fromString(<string>value));
    }
  }

  get feedbackDaoUpdatedAtS(): i32 {
    let value = this.get("feedbackDaoUpdatedAtS");
    return value!.toI32();
  }

  set feedbackDaoUpdatedAtS(value: i32) {
    this.set("feedbackDaoUpdatedAtS", Value.fromI32(value));
  }

  get feedbackDev(): string | null {
    let value = this.get("feedbackDev");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set feedbackDev(value: string | null) {
    if (!value) {
      this.unset("feedbackDev");
    } else {
      this.set("feedbackDev", Value.fromString(<string>value));
    }
  }

  get feedbackDevUpdatedAtS(): i32 {
    let value = this.get("feedbackDevUpdatedAtS");
    return value!.toI32();
  }

  set feedbackDevUpdatedAtS(value: i32) {
    this.set("feedbackDevUpdatedAtS", Value.fromI32(value));
  }
}

export class PIIAnswer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("data", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PIIAnswer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PIIAnswer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PIIAnswer", id.toString(), this);
    }
  }

  static load(id: string): PIIAnswer | null {
    return changetype<PIIAnswer | null>(store.get("PIIAnswer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get manager(): string | null {
    let value = this.get("manager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set manager(value: string | null) {
    if (!value) {
      this.unset("manager");
    } else {
      this.set("manager", Value.fromString(<string>value));
    }
  }

  get data(): string {
    let value = this.get("data");
    return value!.toString();
  }

  set data(value: string) {
    this.set("data", Value.fromString(value));
  }
}

export class GrantApplicationReviewer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("member", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save GrantApplicationReviewer entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GrantApplicationReviewer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GrantApplicationReviewer", id.toString(), this);
    }
  }

  static load(id: string): GrantApplicationReviewer | null {
    return changetype<GrantApplicationReviewer | null>(
      store.get("GrantApplicationReviewer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get member(): string {
    let value = this.get("member");
    return value!.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get assignedAtS(): i32 {
    let value = this.get("assignedAtS");
    return value!.toI32();
  }

  set assignedAtS(value: i32) {
    this.set("assignedAtS", Value.fromI32(value));
  }
}

export class QBAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("walletAddress", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QBAdmin entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save QBAdmin entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("QBAdmin", id.toString(), this);
    }
  }

  static load(id: string): QBAdmin | null {
    return changetype<QBAdmin | null>(store.get("QBAdmin", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get walletAddress(): Bytes {
    let value = this.get("walletAddress");
    return value!.toBytes();
  }

  set walletAddress(value: Bytes) {
    this.set("walletAddress", Value.fromBytes(value));
  }

  get addedAt(): i32 {
    let value = this.get("addedAt");
    return value!.toI32();
  }

  set addedAt(value: i32) {
    this.set("addedAt", Value.fromI32(value));
  }
}

export class ApplicationAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("updatedBy", Value.fromBytes(Bytes.empty()));
    this.set("application", Value.fromString(""));
    this.set("state", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ApplicationAction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ApplicationAction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ApplicationAction", id.toString(), this);
    }
  }

  static load(id: string): ApplicationAction | null {
    return changetype<ApplicationAction | null>(
      store.get("ApplicationAction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get updatedAtS(): i32 {
    let value = this.get("updatedAtS");
    return value!.toI32();
  }

  set updatedAtS(value: i32) {
    this.set("updatedAtS", Value.fromI32(value));
  }

  get updatedBy(): Bytes {
    let value = this.get("updatedBy");
    return value!.toBytes();
  }

  set updatedBy(value: Bytes) {
    this.set("updatedBy", Value.fromBytes(value));
  }

  get application(): string {
    let value = this.get("application");
    return value!.toString();
  }

  set application(value: string) {
    this.set("application", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value!.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get feedback(): string | null {
    let value = this.get("feedback");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set feedback(value: string | null) {
    if (!value) {
      this.unset("feedback");
    } else {
      this.set("feedback", Value.fromString(<string>value));
    }
  }
}

export class GrantApplication extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("grant", Value.fromString(""));
    this.set("applicant", Value.fromString(""));
    this.set("state", Value.fromString(""));
    this.set("fields", Value.fromStringArray(new Array(0)));
    this.set("pii", Value.fromStringArray(new Array(0)));
    this.set("milestones", Value.fromStringArray(new Array(0)));
    this.set("reviewers", Value.fromStringArray(new Array(0)));
    this.set("pendingReviewerAddresses", Value.fromBytesArray(new Array(0)));
    this.set("doneReviewerAddresses", Value.fromBytesArray(new Array(0)));
    this.set("applicationReviewers", Value.fromStringArray(new Array(0)));
    this.set("walletAddress", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantApplication entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GrantApplication entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GrantApplication", id.toString(), this);
    }
  }

  static load(id: string): GrantApplication | null {
    return changetype<GrantApplication | null>(
      store.get("GrantApplication", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grant(): string {
    let value = this.get("grant");
    return value!.toString();
  }

  set grant(value: string) {
    this.set("grant", Value.fromString(value));
  }

  get applicant(): string {
    let value = this.get("applicant");
    return value!.toString();
  }

  set applicant(value: string) {
    this.set("applicant", Value.fromString(value));
  }

  get applicantPublicKey(): string | null {
    let value = this.get("applicantPublicKey");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set applicantPublicKey(value: string | null) {
    if (!value) {
      this.unset("applicantPublicKey");
    } else {
      this.set("applicantPublicKey", Value.fromString(<string>value));
    }
  }

  get state(): string {
    let value = this.get("state");
    return value!.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get fields(): Array<string> {
    let value = this.get("fields");
    return value!.toStringArray();
  }

  set fields(value: Array<string>) {
    this.set("fields", Value.fromStringArray(value));
  }

  get pii(): Array<string> {
    let value = this.get("pii");
    return value!.toStringArray();
  }

  set pii(value: Array<string>) {
    this.set("pii", Value.fromStringArray(value));
  }

  get createdAtS(): i32 {
    let value = this.get("createdAtS");
    return value!.toI32();
  }

  set createdAtS(value: i32) {
    this.set("createdAtS", Value.fromI32(value));
  }

  get updatedAtS(): i32 {
    let value = this.get("updatedAtS");
    return value!.toI32();
  }

  set updatedAtS(value: i32) {
    this.set("updatedAtS", Value.fromI32(value));
  }

  get actions(): Array<string> | null {
    let value = this.get("actions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set actions(value: Array<string> | null) {
    if (!value) {
      this.unset("actions");
    } else {
      this.set("actions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get milestones(): Array<string> {
    let value = this.get("milestones");
    return value!.toStringArray();
  }

  set milestones(value: Array<string>) {
    this.set("milestones", Value.fromStringArray(value));
  }

  get feedbackDao(): string | null {
    let value = this.get("feedbackDao");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set feedbackDao(value: string | null) {
    if (!value) {
      this.unset("feedbackDao");
    } else {
      this.set("feedbackDao", Value.fromString(<string>value));
    }
  }

  get feedbackDev(): string | null {
    let value = this.get("feedbackDev");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set feedbackDev(value: string | null) {
    if (!value) {
      this.unset("feedbackDev");
    } else {
      this.set("feedbackDev", Value.fromString(<string>value));
    }
  }

  get reviews(): Array<string> {
    let value = this.get("reviews");
    return value!.toStringArray();
  }

  set reviews(value: Array<string>) {
    this.set("reviews", Value.fromStringArray(value));
  }

  get reviewers(): Array<string> {
    let value = this.get("reviewers");
    return value!.toStringArray();
  }

  set reviewers(value: Array<string>) {
    this.set("reviewers", Value.fromStringArray(value));
  }

  get pendingReviewerAddresses(): Array<Bytes> {
    let value = this.get("pendingReviewerAddresses");
    return value!.toBytesArray();
  }

  set pendingReviewerAddresses(value: Array<Bytes>) {
    this.set("pendingReviewerAddresses", Value.fromBytesArray(value));
  }

  get doneReviewerAddresses(): Array<Bytes> {
    let value = this.get("doneReviewerAddresses");
    return value!.toBytesArray();
  }

  set doneReviewerAddresses(value: Array<Bytes>) {
    this.set("doneReviewerAddresses", Value.fromBytesArray(value));
  }

  get applicationReviewers(): Array<string> {
    let value = this.get("applicationReviewers");
    return value!.toStringArray();
  }

  set applicationReviewers(value: Array<string>) {
    this.set("applicationReviewers", Value.fromStringArray(value));
  }

  get comments(): Array<string> | null {
    let value = this.get("comments");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set comments(value: Array<string> | null) {
    if (!value) {
      this.unset("comments");
    } else {
      this.set("comments", Value.fromStringArray(<Array<string>>value));
    }
  }

  get walletAddress(): Bytes {
    let value = this.get("walletAddress");
    return value!.toBytes();
  }

  set walletAddress(value: Bytes) {
    this.set("walletAddress", Value.fromBytes(value));
  }

  get version(): i32 {
    let value = this.get("version");
    return value!.toI32();
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }

  get profile(): string | null {
    let value = this.get("profile");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set profile(value: string | null) {
    if (!value) {
      this.unset("profile");
    } else {
      this.set("profile", Value.fromString(<string>value));
    }
  }
}

export class GrantApplicationRevision extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("application", Value.fromString(""));
    this.set("actorId", Value.fromBytes(Bytes.empty()));
    this.set("state", Value.fromString(""));
    this.set("fields", Value.fromStringArray(new Array(0)));
    this.set("milestones", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save GrantApplicationRevision entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GrantApplicationRevision entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GrantApplicationRevision", id.toString(), this);
    }
  }

  static load(id: string): GrantApplicationRevision | null {
    return changetype<GrantApplicationRevision | null>(
      store.get("GrantApplicationRevision", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get application(): string {
    let value = this.get("application");
    return value!.toString();
  }

  set application(value: string) {
    this.set("application", Value.fromString(value));
  }

  get actorId(): Bytes {
    let value = this.get("actorId");
    return value!.toBytes();
  }

  set actorId(value: Bytes) {
    this.set("actorId", Value.fromBytes(value));
  }

  get state(): string {
    let value = this.get("state");
    return value!.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get fields(): Array<string> {
    let value = this.get("fields");
    return value!.toStringArray();
  }

  set fields(value: Array<string>) {
    this.set("fields", Value.fromStringArray(value));
  }

  get milestones(): Array<string> {
    let value = this.get("milestones");
    return value!.toStringArray();
  }

  set milestones(value: Array<string>) {
    this.set("milestones", Value.fromStringArray(value));
  }

  get createdAtS(): i32 {
    let value = this.get("createdAtS");
    return value!.toI32();
  }

  set createdAtS(value: i32) {
    this.set("createdAtS", Value.fromI32(value));
  }

  get feedbackDao(): string | null {
    let value = this.get("feedbackDao");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set feedbackDao(value: string | null) {
    if (!value) {
      this.unset("feedbackDao");
    } else {
      this.set("feedbackDao", Value.fromString(<string>value));
    }
  }

  get feedbackDev(): string | null {
    let value = this.get("feedbackDev");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set feedbackDev(value: string | null) {
    if (!value) {
      this.unset("feedbackDev");
    } else {
      this.set("feedbackDev", Value.fromString(<string>value));
    }
  }

  get version(): i32 {
    let value = this.get("version");
    return value!.toI32();
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }
}

export class FundsTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("grant", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("sender", Value.fromBytes(Bytes.empty()));
    this.set("to", Value.fromBytes(Bytes.empty()));
    this.set("type", Value.fromString(""));
    this.set("asset", Value.fromBytes(Bytes.empty()));
    this.set("status", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FundsTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FundsTransfer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FundsTransfer", id.toString(), this);
    }
  }

  static load(id: string): FundsTransfer | null {
    return changetype<FundsTransfer | null>(store.get("FundsTransfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get application(): string | null {
    let value = this.get("application");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set application(value: string | null) {
    if (!value) {
      this.unset("application");
    } else {
      this.set("application", Value.fromString(<string>value));
    }
  }

  get milestone(): string | null {
    let value = this.get("milestone");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set milestone(value: string | null) {
    if (!value) {
      this.unset("milestone");
    } else {
      this.set("milestone", Value.fromString(<string>value));
    }
  }

  get review(): string | null {
    let value = this.get("review");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set review(value: string | null) {
    if (!value) {
      this.unset("review");
    } else {
      this.set("review", Value.fromString(<string>value));
    }
  }

  get grant(): string {
    let value = this.get("grant");
    return value!.toString();
  }

  set grant(value: string) {
    this.set("grant", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get createdAtS(): i32 {
    let value = this.get("createdAtS");
    return value!.toI32();
  }

  set createdAtS(value: i32) {
    this.set("createdAtS", Value.fromI32(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value!.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get nonEvmAsset(): string | null {
    let value = this.get("nonEvmAsset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nonEvmAsset(value: string | null) {
    if (!value) {
      this.unset("nonEvmAsset");
    } else {
      this.set("nonEvmAsset", Value.fromString(<string>value));
    }
  }

  get transactionHash(): string | null {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transactionHash(value: string | null) {
    if (!value) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromString(<string>value));
    }
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get tokenName(): string | null {
    let value = this.get("tokenName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenName(value: string | null) {
    if (!value) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromString(<string>value));
    }
  }

  get tokenUSDValue(): BigInt | null {
    let value = this.get("tokenUSDValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenUSDValue(value: BigInt | null) {
    if (!value) {
      this.unset("tokenUSDValue");
    } else {
      this.set("tokenUSDValue", Value.fromBigInt(<BigInt>value));
    }
  }

  get executionTimestamp(): i32 {
    let value = this.get("executionTimestamp");
    return value!.toI32();
  }

  set executionTimestamp(value: i32) {
    this.set("executionTimestamp", Value.fromI32(value));
  }
}

export class Notification extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("title", Value.fromString(""));
    this.set("content", Value.fromString(""));
    this.set("type", Value.fromString(""));
    this.set("entityIds", Value.fromStringArray(new Array(0)));
    this.set("recipientIds", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Notification entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Notification entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Notification", id.toString(), this);
    }
  }

  static load(id: string): Notification | null {
    return changetype<Notification | null>(store.get("Notification", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get content(): string {
    let value = this.get("content");
    return value!.toString();
  }

  set content(value: string) {
    this.set("content", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get entityIds(): Array<string> {
    let value = this.get("entityIds");
    return value!.toStringArray();
  }

  set entityIds(value: Array<string>) {
    this.set("entityIds", Value.fromStringArray(value));
  }

  get recipientIds(): Array<string> {
    let value = this.get("recipientIds");
    return value!.toStringArray();
  }

  set recipientIds(value: Array<string>) {
    this.set("recipientIds", Value.fromStringArray(value));
  }

  get actorId(): Bytes | null {
    let value = this.get("actorId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set actorId(value: Bytes | null) {
    if (!value) {
      this.unset("actorId");
    } else {
      this.set("actorId", Value.fromBytes(<Bytes>value));
    }
  }

  get cursor(): i32 {
    let value = this.get("cursor");
    return value!.toI32();
  }

  set cursor(value: i32) {
    this.set("cursor", Value.fromI32(value));
  }
}

export class Migration extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("fromWallet", Value.fromBytes(Bytes.empty()));
    this.set("toWallet", Value.fromBytes(Bytes.empty()));
    this.set("type", Value.fromString(""));
    this.set("transactionHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Migration entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Migration entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Migration", id.toString(), this);
    }
  }

  static load(id: string): Migration | null {
    return changetype<Migration | null>(store.get("Migration", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromWallet(): Bytes {
    let value = this.get("fromWallet");
    return value!.toBytes();
  }

  set fromWallet(value: Bytes) {
    this.set("fromWallet", Value.fromBytes(value));
  }

  get toWallet(): Bytes {
    let value = this.get("toWallet");
    return value!.toBytes();
  }

  set toWallet(value: Bytes) {
    this.set("toWallet", Value.fromBytes(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get workspace(): string | null {
    let value = this.get("workspace");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set workspace(value: string | null) {
    if (!value) {
      this.unset("workspace");
    } else {
      this.set("workspace", Value.fromString(<string>value));
    }
  }

  get application(): string | null {
    let value = this.get("application");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set application(value: string | null) {
    if (!value) {
      this.unset("application");
    } else {
      this.set("application", Value.fromString(<string>value));
    }
  }

  get review(): string | null {
    let value = this.get("review");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set review(value: string | null) {
    if (!value) {
      this.unset("review");
    } else {
      this.set("review", Value.fromString(<string>value));
    }
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}
