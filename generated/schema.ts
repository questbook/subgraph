// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class GrantField extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("title", Value.fromString(""));
    this.set("inputType", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantField entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GrantField entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GrantField", id.toString(), this);
    }
  }

  static load(id: string): GrantField | null {
    return changetype<GrantField | null>(store.get("GrantField", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get inputType(): string {
    let value = this.get("inputType");
    return value!.toString();
  }

  set inputType(value: string) {
    this.set("inputType", Value.fromString(value));
  }

  get possibleValues(): Array<string> | null {
    let value = this.get("possibleValues");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set possibleValues(value: Array<string> | null) {
    if (!value) {
      this.unset("possibleValues");
    } else {
      this.set("possibleValues", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class GrantFieldAnswer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("field", Value.fromString(""));
    this.set("value", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantFieldAnswer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GrantFieldAnswer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GrantFieldAnswer", id.toString(), this);
    }
  }

  static load(id: string): GrantFieldAnswer | null {
    return changetype<GrantFieldAnswer | null>(
      store.get("GrantFieldAnswer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get field(): string {
    let value = this.get("field");
    return value!.toString();
  }

  set field(value: string) {
    this.set("field", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value!.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }
}

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("asset", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Reward entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Reward", id.toString(), this);
    }
  }

  static load(id: string): Reward | null {
    return changetype<Reward | null>(store.get("Reward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value!.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get committed(): i32 {
    let value = this.get("committed");
    return value!.toI32();
  }

  set committed(value: i32) {
    this.set("committed", Value.fromI32(value));
  }

  get alloted(): i32 {
    let value = this.get("alloted");
    return value!.toI32();
  }

  set alloted(value: i32) {
    this.set("alloted", Value.fromI32(value));
  }

  get paid(): i32 {
    let value = this.get("paid");
    return value!.toI32();
  }

  set paid(value: i32) {
    this.set("paid", Value.fromI32(value));
  }
}

export class Grant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("creatorId", Value.fromBytes(Bytes.empty()));
    this.set("title", Value.fromString(""));
    this.set("summary", Value.fromString(""));
    this.set("details", Value.fromString(""));
    this.set("reward", Value.fromString(""));
    this.set("fields", Value.fromStringArray(new Array(0)));
    this.set("metadataHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Grant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Grant entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Grant", id.toString(), this);
    }
  }

  static load(id: string): Grant | null {
    return changetype<Grant | null>(store.get("Grant", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creatorId(): Bytes {
    let value = this.get("creatorId");
    return value!.toBytes();
  }

  set creatorId(value: Bytes) {
    this.set("creatorId", Value.fromBytes(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get summary(): string {
    let value = this.get("summary");
    return value!.toString();
  }

  set summary(value: string) {
    this.set("summary", Value.fromString(value));
  }

  get details(): string {
    let value = this.get("details");
    return value!.toString();
  }

  set details(value: string) {
    this.set("details", Value.fromString(value));
  }

  get reward(): string {
    let value = this.get("reward");
    return value!.toString();
  }

  set reward(value: string) {
    this.set("reward", Value.fromString(value));
  }

  get workspace(): string | null {
    let value = this.get("workspace");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set workspace(value: string | null) {
    if (!value) {
      this.unset("workspace");
    } else {
      this.set("workspace", Value.fromString(<string>value));
    }
  }

  get deadline(): string | null {
    let value = this.get("deadline");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deadline(value: string | null) {
    if (!value) {
      this.unset("deadline");
    } else {
      this.set("deadline", Value.fromString(<string>value));
    }
  }

  get fields(): Array<string> {
    let value = this.get("fields");
    return value!.toStringArray();
  }

  set fields(value: Array<string>) {
    this.set("fields", Value.fromStringArray(value));
  }

  get metadataHash(): string {
    let value = this.get("metadataHash");
    return value!.toString();
  }

  set metadataHash(value: string) {
    this.set("metadataHash", Value.fromString(value));
  }
}

export class Workspace extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ownerId", Value.fromBytes(Bytes.empty()));
    this.set("title", Value.fromString(""));
    this.set("about", Value.fromString(""));
    this.set("logoIpfsHash", Value.fromString(""));
    this.set("supportedNetworks", Value.fromBytesArray(new Array(0)));
    this.set("metadataHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Workspace entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Workspace entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Workspace", id.toString(), this);
    }
  }

  static load(id: string): Workspace | null {
    return changetype<Workspace | null>(store.get("Workspace", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ownerId(): Bytes {
    let value = this.get("ownerId");
    return value!.toBytes();
  }

  set ownerId(value: Bytes) {
    this.set("ownerId", Value.fromBytes(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get about(): string {
    let value = this.get("about");
    return value!.toString();
  }

  set about(value: string) {
    this.set("about", Value.fromString(value));
  }

  get logoIpfsHash(): string {
    let value = this.get("logoIpfsHash");
    return value!.toString();
  }

  set logoIpfsHash(value: string) {
    this.set("logoIpfsHash", Value.fromString(value));
  }

  get supportedNetworks(): Array<Bytes> {
    let value = this.get("supportedNetworks");
    return value!.toBytesArray();
  }

  set supportedNetworks(value: Array<Bytes>) {
    this.set("supportedNetworks", Value.fromBytesArray(value));
  }

  get metadataHash(): string {
    let value = this.get("metadataHash");
    return value!.toString();
  }

  set metadataHash(value: string) {
    this.set("metadataHash", Value.fromString(value));
  }
}
